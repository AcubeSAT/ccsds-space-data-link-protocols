image: lightspot21/acubesat-ci:latest

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Global caching directive for pip
cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip

stages:
  - build
  - test
  - deploy

before_script:
  - apt-get update -qq && apt-get -qq -y install libstdc++6 python3-pip && python3 -m pip install --upgrade pip
  - python3 -V
  - python3 -m pip --version
  - g++ --version
  - cat /etc/*-release
  - python3 -m pip install gcovr

check-build:
  image: spacedot/build-base # TODO: push build-base
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    GCC_COLORS: "error=31;1:warning=35;1:note=36;1:range1=32:range2=34:locus=39;1:quote=39;1:fixit-insert=32:fixit-delete=31:diff-filename=39;1:diff-hunk=32:diff-delete=31:diff-insert=32:type-diff=32;1"
    CLICOLOR_FORCE: 1 # Necessary for cmake to output colours
  script:
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_CXX_FLAGS="-Werror -fdiagnostics-color=always"
    - make -j4
    - make clean
    - cmake .. -DCMAKE_CXX_FLAGS="-Wall -Wextra -fdiagnostics-color=always" # Build again, but with more warnings
    - make -j4

tests:
  stage: test
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - mkdir build
    - cd build
    - cmake ..
    - make tests -j4
    - ./tests --use-colour yes  # Run the tests
  after_script:
    - ./tests -r junit -o junit.xml
  artifacts:
    expire_in: 1 week
    reports:
      junit: junit.xml


cppcheck:
  image: spacedot/cppcheck:2.5
  stage: analyze
  before_script:
    - cppcheck --version
  allow_failure: true
  script:
    - cd $CI_PROJECT_DIR
    - cppcheck --enable=all --addon=misra --suppress=misra-c2012-3.1 --suppress=misra-c2012-5.1 --suppress=misra-c2012-5.2 \
      --suppress=misra-c2012-5.3 --suppress=misra-c2012-12.3 --suppress=misra-c2012-13.4 --suppress=misra-c2012-14.4 \
      --suppress=misra-c2012-15.5 --suppress=misra-c2012-16.3 --suppress=misra-c2012-18.4 --suppress=misra-c2012-18.8 \
      --suppress=unusedFunction --suppress=noExplicitConstructor --force --inline-suppr --error-exitcode=1 \
      --xml --xml-version=2 2>report.xml -I ./inc ./src
  after_script:
    - mkdir cppcheck-html-report
    - cppcheck-htmlreport --source-dir=. --title=html-report --file=report.xml --report-dir=cppcheck-html-report
  artifacts:
    when: on_failure
    paths:
      - ./cppcheck-html-report

clang-tidy:
  image: spacedot/clang-tools:13.0.0-html-1.3.7
  stage: analyze
  script:
    - cd $CI_PROJECT_DIR
    - cmake -B ./build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - clang-tidy -p $CI_PROJECT_DIR/build/compile_commands.json --checks=* `find $CI_PROJECT_DIR/src -type f -regextype posix-egrep -regex '.*\.(cpp|hpp|c|h)'` >> clang-tidy-output.log
  after_script:
    - mkdir clang-tidy-html-report
    - clang-tidy-html clang-tidy-output.log
    - mv clang.html clang-tidy-html-report
  artifacts:
    paths:
      - ./clang-tidy-html-report

clang-analyzer:
  image: spacedot/clang-tools:13.0.0-html-1.3.7
  stage: analyze
  before_script:
    - mkdir scan-build-html-report
  script:
    - cd $CI_PROJECT_DIR
    - scan-build cmake ./ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    - scan-build -o ./scan-build-html-report make
  artifacts:
    paths:
      - ./scan-build-html-report

doxygen:
  image: spacedot/doxygen:1.9.2-awesomecss-1.6.0
  stage: analyze
  script:
    - cd $CI_PROJECT_DIR
    - doxygen doxygen.conf
  artifacts:
    paths:
      - ./docs

pages:
  stage: deploy
  when: always  # Deploy always and on build or test failure, generate just the documentation
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - public
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - ./ci/pages_deploy.sh
    - echo -e "\e[1;36mPublic directory contents\e[0m" && ls -l public/coverage  # Print directory contents for debugging
  artifacts:
    paths:
      - public # Upload the resulting website
  only:
    - branches # Deploy on all branches
